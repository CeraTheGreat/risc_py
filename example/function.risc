'initialization

        MOV [0] ACC     'Get argc
        PSH [0]         'Pass argc to main
        JEZ NULLP       'If zero args, pass null pointer
        PSH 1           'Else push *argv
        JMP INIT
NULLP:  PSH 0
INIT:   CLL MAIN        'Start main function
        HLT             'Stop after main returns

'------------------------------------------------------------------------------'
'void main(int argc, char **argv)
MAIN:   MOV BSP ACC     'Get base pointer
        SUB2            'Offset by 2 to get argc
        PSH [ACC]       'Push argc onto stack
        MOV [ACC] BAK   'Copy argc to bakup
        ADD 1           'Offset by 1 to get *argv
        PSH [ACC]       'Push *argv onto stack

MLOP:   MOV BAK ACC     'Move argc from bakup into accumulator
        JEZ EMAIN       'If out of arguments, jump to end
        SUB 1           'Decrement
        MOV ACC BAK     'Save back decremented count
        PSH [[STP]]     'Else push argv[i] onto stack
        CLL PRINT       'Print this string
        POP             'Remove pointer from stack
        MOV [STP] ACC   'Move *argv into acc
        ADD 1           'Increment to get *(argv + i) 
        POP             'Remove *argv from stack
        PSH ACC         'Replace with incremented value
        JMP MLOP        'Restart loop

EMAIN:  RET             'Return from main

'------------------------------------------------------------------------------'
'void print(char *string)
PRINT:  PSH ACC         'SAVE ACC to stack for register integrity
        PSH BAK         'Save BAK to stack for register integrity
        MOV BSP ACC     'move base pointer to accumulator
        SUB 1           'Sub 1 to offset into parameter space
        MOV [ACC] BAK   'Move memory pointed at by variable into BAK
PLOP:   MOV [BAK] ACC   'Move the value at the pointer into ACC to compare
        JEZ PEND        'If current char is NULL, string is done
        CHP ACC         'Else print current char
        MOV BAK ACC     'Move BAK to ACC to increment the pointer
        ADD 1
        MOV ACC BAK     'Save incremented pointer
        JMP PLOP        'Go to next char
PEND:   CHP 12          'Carriage Return
        CHP 13          'Line feed
        MOV [STP] BAK   'Return in the same state we started in
        POP
        MOV [STP] ACC   'Return in the same state we started in
        RET

